{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-04-05T12:13:34-04:00",
    "name": "SyncTube",
    "author": "mattman107@github.com",
    "description": "A Synctube pterodactyl egg. Based off of the Node.js generic egg.",
    "features": null,
    "docker_images": {
        "Nodejs 20": "ghcr.io\/parkervcp\/yolks:nodejs_20",
        "Nodejs 19": "ghcr.io\/parkervcp\/yolks:nodejs_19",
        "Nodejs 18": "ghcr.io\/parkervcp\/yolks:nodejs_18",
        "Nodejs 17": "ghcr.io\/parkervcp\/yolks:nodejs_17",
        "Nodejs 16": "ghcr.io\/parkervcp\/yolks:nodejs_16",
        "Nodejs 14": "ghcr.io\/parkervcp\/yolks:nodejs_14",
        "Nodejs 12": "ghcr.io\/parkervcp\/yolks:nodejs_12"
    },
    "file_denylist": [],
    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then \/usr\/local\/bin\/npm install ${NODE_PACKAGES}; fi; if [ -f \/home\/container\/package.json ]; then \/usr\/local\/bin\/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then \/usr\/local\/bin\/node \"\/home\/container\/${MAIN_FILE}\"; else \/usr\/local\/bin\/ts-node --esm \"\/home\/container\/${MAIN_FILE}\"; fi",
    "config": {
        "files": "{\r\n    \"user\/config.json\": {\r\n        \"parser\": \"json\",\r\n        \"find\": {\r\n            \"port\": \"{{server.build.default.port}}\",\r\n            \"channelName\": \"{{server.build.env.CHANNEL_NAME}}\",\r\n            \"maxLoginLength\": \"{{server.build.env.MAX_USERNAME_LENGTH}}\",\r\n            \"maxMessageLength\": \"{{server.build.env.MAX_MESSAGE_LENGTH}}\",\r\n            \"serverChatHistory\": \"{{server.build.env.CHAT_HISTORY_LENGTH}}\",\r\n            \"totalVideoLimit\": \"{{server.build.env.MAX_VIDEOS}}\",\r\n            \"userVideoLimit\": \"{{server.build.env.USER_MAX_VIDEOS}}\",\r\n            \"youtubePlaylistLimit\": \"{{server.build.env.YOUTUBE_PLAYLIST_LIMIT}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": [\r\n        \"Global:\"\r\n    ]\r\n}",
        "logs": "{}",
        "stop": "\/exit"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# NodeJS App Installation Script\r\n#\r\n# Server Files: \/mnt\/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python python-dev libtool\r\n\r\necho -e \"updating npm. please wait...\"\r\nnpm install npm@latest -g\r\n\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d\/ -f3-)\"\r\nfi\r\n\r\n## pull git js repo\r\nif [ \"$(ls -A \/mnt\/server)\" ]; then\r\n    echo -e \"\/mnt\/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git\/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"\/mnt\/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n    \r\n    echo \"{}\" > \/mnt\/server\/user\/config.json\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    \/usr\/local\/bin\/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f \/mnt\/server\/package.json ]; then\r\n    \/usr\/local\/bin\/npm install --production\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
            "container": "node:18-bullseye-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Auto Update",
            "description": "Pull the latest files on startup when using a GitHub repo.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Additional Node packages",
            "description": "Install additional node packages.\r\n\r\nUse spaces to separate.",
            "env_variable": "NODE_PACKAGES",
            "default_value": "ws",
            "user_viewable": true,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Main file",
            "description": "The file that starts the app.\r\nCan be .js and .ts",
            "env_variable": "MAIN_FILE",
            "default_value": "build\/server.js",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|string|max:16",
            "field_type": "text"
        },
        {
            "name": "Git Repo Address",
            "description": "GitHub Repo to clone\r\n\r\nI.E. https:\/\/github.com\/parkervcp\/repo_name",
            "env_variable": "GIT_ADDRESS",
            "default_value": "https:\/\/github.com\/RblSb\/SyncTube.git",
            "user_viewable": true,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Install Branch",
            "description": "The branch to install.",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Channel Name",
            "description": "Name of the tab that displays in the browser.",
            "env_variable": "CHANNEL_NAME",
            "default_value": "Pterodactyl SyncTube",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:50",
            "field_type": "text"
        },
        {
            "name": "Max Username Length",
            "description": "Maximum length of a user's username.",
            "env_variable": "MAX_USERNAME_LENGTH",
            "default_value": "20",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|integer",
            "field_type": "text"
        },
        {
            "name": "Max Chat Message Length",
            "description": "Maximum character length of a chat messages.",
            "env_variable": "MAX_MESSAGE_LENGTH",
            "default_value": "500",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|integer",
            "field_type": "text"
        },
        {
            "name": "Server Chat History",
            "description": "How many chat messages are actively kept.",
            "env_variable": "CHAT_HISTORY_LENGTH",
            "default_value": "50",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|integer",
            "field_type": "text"
        },
        {
            "name": "Max Videos",
            "description": "Max amount of videos in the queue.\r\n0 = no limit",
            "env_variable": "MAX_VIDEOS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|integer",
            "field_type": "text"
        },
        {
            "name": "Max Videos Per User",
            "description": "The user limit on putting videos in the queue.\r\n0 = no limit",
            "env_variable": "USER_MAX_VIDEOS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|integer",
            "field_type": "text"
        },
        {
            "name": "Youtube Playlist Limit",
            "description": "Max size of a youtube playlist that is added to the queue.",
            "env_variable": "YOUTUBE_PLAYLIST_LIMIT",
            "default_value": "50",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|integer",
            "field_type": "text"
        }
    ]
}
